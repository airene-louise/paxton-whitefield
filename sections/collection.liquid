{% liquid
  assign desktop_columns = section.settings.desktop_columns | default: 4
  assign mobile_columns = section.settings.mobile_columns | default: 2
%}
<div class="collection">
  {% render "collection-hero"
    section: section,
    image_desktop: collection.metafields.custom.hero_desktop,
    image_mobile: collection.metafields.custom.hero_mobile,
    collections_nav: collection.metafields.custom.collections_nav
  %}
  <div class="collection__inner">
    <div class="collection__filters__overlay" onclick="toggleFilters()"></div>

    <div class="collection__side-bar">
      {% render "collection-filters" %}
    </div>

    <div class="collection__products-count">
      <div class="collection__products-count__inner">
        <div class="collection__products-count-toggle" onclick="toggleFilters()">
            <span>{% render 'icons', icon: 'filter' %}</span>
            <span>{{ "collection.filters.title" | t }} <span class="mobile-only">& Sort</span></span>
        </div>
        <span class="collection__products-count-wrapper">
          <span data-products-count>{{ collection.all_products_count }}</span>
          <span>{{ "collection.products_count" | t }}</span>
        </span>
        {% render "collection-sort" %}
        <span class="collection__grid-selection">
          <span class="collection__grid-selection__single-column">
            <svg width="21" height="20" viewBox="0 0 21 20" fill="none" xmlns="http://www.w3.org/2000/svg">
              <rect x="1.2019" y="0.5" width="19" height="19" stroke="black" stroke-opacity="0.4"/>
            </svg>
          </span>
          <span class="collection__grid-selection__multi-column">
            <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
              <rect x="0.674561" y="0.5" width="8.61577" height="8.7" fill="#F5A800" stroke="#F5A800"/>
              <rect x="10.8843" y="0.5" width="8.61577" height="8.7" fill="#F5A800" stroke="#F5A800"/>
              <rect x="0.674561" y="10.8" width="8.61577" height="8.7" fill="#F5A800" stroke="#F5A800"/>
              <rect x="10.8843" y="10.8" width="8.61532" height="8.7" fill="#F5A800" stroke="#F5A800"/>
            </svg>
          </span>
        </span>
      </div>
    </div>  


    <div class="collection__products-grid collection__products-grid--{{ section.settings.desktop_columns }}-col">

      {% liquid
     
        paginate collection.products by 24
          assign products_count = paginate.items
          assign paginate = paginate
          assign products = collection.products

                
          unless collection.title == "Archive" or collection.title == "archive"
            for product in products
              unless product.tags contains "Archive" or product.tags contains "archive" or product.tags contains "partner" or product.tags contains "Partner"
                render 'product-card', product: product
              endunless
            endfor
          else 
            for product in products
              unless product.tags contains "partner" or product.tags contains "Partner"
                render 'product-card', product: product
              endunless
            endfor
          endunless
        endpaginate
      %}
      <div data-paginate-items="{{ products_count }}" hidden></div>
      <div data-paginate-pages="{{ paginate.pages }}" hidden></div>
    </div>

    {% if paginate.pages > 1 %}
      <div class="collection__load-more-wrapper">
        <button
          class="collection__load-more"
          data-load-more
        >
          <img
            width="150"
            height="150"
            loading="lazy"
            src="{{ 'loading.gif' | asset_url }}"
            alt="loading more"
          />
        </button>
      </div>
    {% endif %}

  </div>
</div>

{% render 'collection-additional-information' %}
{% render 'collection-cards', section: section %}
<script>
  (function() {
    // Check if quickshop is defined
    // If not this means we're rendering as normal
    // If it is, this has been re-rendered, so re-init Quickshop
    if (typeof Quickshop === 'undefined') {
      document.addEventListener('quickshopReady', () => {
        Quickshop.init();
      })
    } else {
      Quickshop.init();
    }
  })(); 
  function toggleFilters() {
    const filters = document.querySelector('.collection__side-bar');
    const overlay = document.querySelector('.collection__filters__overlay');
    filters.classList.toggle('is-open');
    overlay.classList.toggle('is-open');
    document.body.classList.toggle('no-scroll');
  };
  
  var filterBar = document.querySelector('.collection__products-count');
  var sticky = filterBar.offsetTop;

  // makes button sticky when scrolling using an event listener and a class
  window.addEventListener('scroll', () => {
    if (window.pageYOffset > sticky) {
      filterBar.classList.add('sticky');
    } else {
      filterBar.classList.remove('sticky');
    }
  });

  let isObserving = false;

  // Function to handle the intersection event
  function onIntersection(entries) {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const loadMoreButton = document.querySelector('.collection__load-more');
        if (loadMoreButton && loadMoreButton.offsetWidth > 0 && loadMoreButton.offsetHeight > 0) {
          loadMoreButton.click();
          Quickshop.init();
        }
      }
    });
  }

  // Create the Intersection Observer
  const observer = new IntersectionObserver(onIntersection, { threshold: 1.0 });

  // Scroll Event Listener
  window.addEventListener('scroll', () => {
    if (!isObserving) {
        const loadMoreButton = document.querySelector('.collection__load-more');
      if (loadMoreButton) {
        observer.observe(loadMoreButton);
        isObserving = true;
      }
    }
  });


  // Init Quickshop when filters are applied
  document.addEventListener('filtersApplied', () => {
    Quickshop.init();
  })
  const columnSelector = document.querySelector('.collection__grid-selection');
  const singleSelector = document.querySelector('.collection__grid-selection__single-column');
  const multiSelector = document.querySelector('.collection__grid-selection__multi-column');
  const productsGrid = document.querySelector('.collection__products-grid');
  
  columnSelector.querySelectorAll("span").forEach(span => {
    span.addEventListener('click', function () {
      columnSelector.querySelectorAll("span").forEach(span => {
        span.classList.remove('active');
      });
      span.classList.add('active');
      productsGrid.classList.remove('single-column', 'multi-column');
      if (span.classList.contains('collection__grid-selection__single-column')) {
        productsGrid.classList.add('single-column');
        span.querySelector('svg rect').style.fill = '#F5A800';
        span.querySelector('svg rect').style.stroke = '#F5A800';
        multiSelector.style.opacity = '0.4';
        multiSelector.querySelectorAll('svg rect').forEach(rect => {
          rect.style.fill = 'none';
          rect.style.stroke = 'black';
        });
      } else {
        productsGrid.classList.add('multi-column');
        multiSelector.querySelectorAll('svg rect').forEach(rect => {
          rect.style.fill = '#F5A800';
          rect.style.stroke = '#F5A800';
          span.style.opacity = '1';
        })
        singleSelector.querySelector('svg rect').style.fill = 'none';
        singleSelector.querySelector('svg rect').style.stroke = 'black';
      }
    })
  });




</script>

{% schema %}
  {
    "name": "Collection",
    "settings": [
      {
        "type": "header",
        "content": "Hero"
      },
      {
        "type": "image_picker",
        "id": "image_desktop",
        "label": "Desktop Hero Image"
      },
      {
        "type": "image_picker",
        "id": "image_mobile",
        "label": "Mobile Hero Image"
      },
      {
        "type": "link_list",
        "id": "collections_nav",
        "label": "Collections Navigation"
      },
      {
        "type": "header",
        "content": "Columns"
      },
      {
        "id": "desktop_columns",
        "label": "Desktop Columns",
        "type": "select",
        "default": "4",
        "options": [
          {
            "value": "2",
            "label": "2"
          },
          {
            "value": "3",
            "label": "3"
          },
          {
            "value": "4",
            "label": "4"
          }
        ]
      },
      {
        "id": "mobile_columns",
        "label": "Mobile Columns",
        "type": "select",
        "default": "2",
        "options": [
          {
            "value": "1",
            "label": "1"
          },
          {
            "value": "2",
            "label": "2"
          },
          {
            "value": "3",
            "label": "3"
          }
        ]
      }
    ],
     "blocks": [
      {
        "type": "collection",
        "name": "Collections Bar Item",
        "settings": [
          {
            "type": "collection",
            "id": "collection",
            "label": "Collection"
          }
        ]
      }
    ]
  }
{% endschema %}
